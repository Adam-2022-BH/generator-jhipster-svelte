<%_
	const entityFakeData = generateFakeData('cypress');
	const containsBinaryField = fields.find(field => (field.fieldTypeBinary && !field.blobContentTypeText));
	const relationshipFields = relationships.filter(relationship => (
		relationship.otherEntity.primaryKey
			&& (relationship.relationshipManyToOne
				|| (relationship.relationshipOneToOne && relationship.ownerSide)
				|| (relationship.relationshipManyToMany && relationship.ownerSide))))
	const containsRelationshipField = relationshipFields && relationshipFields.length;
_%>
describe('<%= entityAngularName %> delete dialog page', () => {
	let dynamicId

	<%_ if (containsRelationshipField) { _%>
	before(() => {
		cy.loginByApi(
			Cypress.env('adminUsername'),
			Cypress.env('adminPassword')
		)
	<%_		for (const relationship of relationshipFields) {
				if (relationship.otherEntityUser) {
	_%>
		cy.getById('api/users')
			.its('0.id')
			.as('userId')
	<%_
				} else {
	_%>
	<%_
				}
	_%>
	<%_
			}
	_%>
	})
	<%_
		}
	_%>

	before(function () {
		cy.loginByApi(
			Cypress.env('adminUsername'),
			Cypress.env('adminPassword')
		)
<%_
	if (containsBinaryField) {
_%>
		cy.fixture('integration-test.png')
			.then($blob => {
				return <% } %>cy.save('api/<%= entityApiUrl %>', {
			<%_
				for (field of fields.filter(field => !field.id)) {
					const fieldValue = !entityFakeData ? field.generateFakeData('cypress') : entityFakeData[field.fieldName];
					if (fieldValue === undefined) {
						warning(`Error generating a value for field ${field.fieldName}`);
					}
			_%>
				<%_ if (field.fieldTypeBoolean) { _%>
				<%= field.fieldName %>: true,
				<%_ } else if (field.fieldTypeBinary && !field.blobContentTypeText) { _%>
				<%= field.fieldName %>: $blob,
				<%= field.fieldName %>ContentType: 'image/png',
				<%_ } else if (field.fieldTypeString || field.fieldTypeUUID) { _%>
				<%= field.fieldName %>: '<%= fieldValue %>',
				<%_ } else if (field.fieldTypeLocalDate) { _%>
				<%= field.fieldName %>: '<%= fieldValue %>' ,
				<%_ } else if (field.fieldTypeTimed) { _%>
				<%= field.fieldName %>: '<%= fieldValue %>:00.000Z' ,
				<%_ } else if (field.fieldTypeDuration) { _%>
				<%= field.fieldName %>: 'PT0.000052484S',
				<%_ } else if (field.fieldTypeNumeric) { _%>
				<%= field.fieldName %>: <%= fieldValue %>,
				<%_ } else { _%>
				<%= field.fieldName %>: '<%= fieldValue %>',
				<%_ } _%>
			<%_ } _%>
	<%_		for (const relationship of relationshipFields) {
				if (relationship.otherEntityUser) {
	_%>
				user: { id: this.userId },
	<%_
				}
			}
	_%>
<%_ if (containsBinaryField) { _%>
			})
<%_ } _%>
		}).then(res => {
			dynamicId = res.id
		})
	})

	beforeEach(() => {
		cy.unregisterServiceWorkers()
		cy.loginByApi(
			Cypress.env('adminUsername'),
			Cypress.env('adminPassword')
		)
        cy.intercept('**/api/<%= entityApiUrl %>*').as('get<%= entityClassPlural %>')
        cy.visit('/entities/<%= entityFolderName %>')
        cy.wait('@get<%= entityClassPlural %>')
        // eslint-disable-next-line
        cy.wait(100)
        cy.getBySel('<%= entityInstance %>Table')
            .get('td:nth-child(1)').each(($el, index, $list) => {
                const text = $el.text();
                if(text.includes(dynamicId)) {
                    cy.getBySel('<%= entityInstance %>Table')
                        .get('td:nth-child(1)')
                        .eq(index)
                        .parent()
                        .trigger('mouseenter')
                        .within($tr => {
                            cy.root().get('td').children().getByName('delete<%= entityAngularName %>Btn').click()
                        })
                }
        })
	})

	after(() => {
		cy.delete(`api/<%= entityApiUrl %>/${dynamicId}`, true)
	<%_ if (authenticationType === 'oauth2') { _%>
		cy.logoutByApi()
	<%_ } _%>
	})

    <%_ if (authenticationType === 'oauth2') { _%>
    afterEach(() => {
        cy.logoutByApi()
    })
    <%_ } _%>

	it('should display delete <%= entityAngularName %> dialog', () => {
		cy.getBySel('svlModal').within(() => {
			cy.root()
				.get('h1')
				.should('be.visible')
				.should('contain', 'Confirm delete operation')
				.get('p')
				.should('be.visible')
				.should('contain', 'Are you sure you want to delete the <%= entityClassHumanized %>?')
				.getByName('delete<%= entityAngularName %>Btn')
				.should('not.be.disabled')
				.getByName('cancelBtn')
				.should('not.be.disabled')
		})
	})

	it('should close the dialog without deleting <%= entityAngularName %>', () => {
		cy.getBySel('svlModal').within(() => cy.getByName('cancelBtn').click())
		cy.getBySel('<%= entityInstance %>Title')
			.should('be.visible')
			.should('contain', '<%= entityClassPluralHumanized %>')
	})

	it('should delete the <%= entityAngularName %>', () => {
		cy.getBySel('svlModal').within(() =>
			cy.getByName('delete<%= entityAngularName %>Btn').click()
		)

		cy.getBySel('toast-success').contains(
			'A <%= entityInstance %> is deleted with identifier'
		)

		cy.getBySel('<%= entityInstance %>Title')
			.should('be.visible')
			.should('contain', '<%= entityClassPluralHumanized %>')
	})
})
