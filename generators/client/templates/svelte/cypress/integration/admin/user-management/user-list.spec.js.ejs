describe('User Management list page', () => {
	beforeEach(() => {
		cy.loginByApi('admin', 'admin')
		cy.visit('/admin/user-management')
	})

	it('should greets with users page title', () => {
		cy.getBySel('userMgmtTitle')
			.should('be.visible')
			.should('contain', 'Users')
	})

	it('should display users table', () => {
		cy.getBySel('userMgmtTable')
			.should('be.visible')
			.get('tr')
			.eq(0)
			.children()
			.should('have.length', 7)
			.get('th')
			.eq(0)
			.should('contain', 'ID')
			.get('th')
			.eq(1)
			.should('contain', 'Login')
			.get('th')
			.eq(2)
			.should('contain', 'Email')
			.get('th')
			.eq(3)
			.should('contain', 'Roles')
			.get('th')
			.eq(4)
			.should('contain', 'Created At')
			.get('th')
			.eq(5)
			.should('contain', 'Last Modified By')
			.get('th')
			.eq(6)
			.should('contain', 'Last Modified At')
	})

	it('should display "system" user record in the table', () => {
		cy.getBySel('userMgmtTable')
			.contains('td', 'system')
			.parent()
			.within($tr => {
				cy.root()
					.get('td')
					.eq(2)
					.should('contain', 'system@localhost')
					.get('td')
					.eq(3)
					.should('contain', 'ROLE_USER , ROLE_ADMIN')
					.get('td')
					.eq(4)
					.should('contain', '-')
					.get('td')
					.eq(5)
					.should('contain', 'system')
					.get('td')
					.eq(6)
					.should('contain', '-')
			})
	})

	it('should not allow actions on the current logged in user', () => {
		cy.getBySel('userMgmtTable')
			.contains('td', 'admin')
			.parent()
			.trigger('mouseenter')
			.within($tr => {
				cy.root()
					.get('td')
					.eq(6)
					.children()
					.get('button')
					.eq(0)
					.should('be.disabled')
					.get('button')
					.eq(1)
					.should('be.disabled')
					.get('button')
					.eq(2)
					.should('be.disabled')
					.get('button')
					.eq(3)
					.should('be.disabled')
			})
	})

	it('should allow deactivation of "user" account record', () => {
		cy.getBySel('userMgmtTable')
			.contains('td', 'user')
			.parent()
			.trigger('mouseenter')
			.within($tr => {
				cy.root()
					.get('td')
					.eq(6)
					.children()
					.get('button')
					.eq(0)
					.should('not.be.disabled')
			})
	})
})
