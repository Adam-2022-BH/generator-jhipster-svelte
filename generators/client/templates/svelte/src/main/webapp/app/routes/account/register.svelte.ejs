<script>
	import Icon from 'fa-svelte'
	import { faExclamationCircle } from '@fortawesome/free-solid-svg-icons/faExclamationCircle'

	import Alert from './../../components/Alert.svelte'
	import InputControl from '../../components/InputControl.svelte'
	import accountService from './../../components/account/account-service'
	import { problemBaseUrl } from './../../utils/env'

	let username
	let email
	let password
	let confirmPassword
	let validUsername = false
	let validEmail = false
	let validPassword = false
	let validConfirmPassword = false

	let error
	let accountCreated = false

	$: validForm = validUsername && validEmail && validPassword && validConfirmPassword && !confirmPasswordMismatch
	$: confirmPasswordMismatch = validConfirmPassword && password !== confirmPassword

	function createUserAccount() {
		error = undefined
		accountCreated = false
		accountService
			.createAccount(username, email, password)
			.then(() => accountCreated = true)
			.catch((err) => {
				password = ''
				confirmPassword = ''
				if(err && err.type) {
					if(err.type === (problemBaseUrl + '/email-already-used')) {
						error = 'duplicateEmail'
					} else if(err.type === (problemBaseUrl + '/login-already-used')) {
						error = 'duplicateLogin'
					} else {
						error = 'error';
					}
				} else {
					error = 'error'
				}
			})
	}

</script>

<svelte:head>
	<title>Create user account</title>
</svelte:head>

<section class="m-3 relative bg-white shadow-md rounded p-4">
	<div class="p-4 w-full sm:max-w-3xl sm:mx-auto">
		<div class="px-4 w-full text-4xl text-center">
			Create user account
		</div>
		<Alert show="{accountCreated}" closeable="{false}">
			User account successfully created. Please check your email for confirmation.
		</Alert>
		<Alert type="danger" show="{!!error}">
			{#if error === 'duplicateEmail'}
			Email is already in use. Please choose another one.
			{:else if error === 'duplicateLogin'}
			Login name already in use. Please choose another one.
			{:else if error}
			User account creation failed. Please try again later.
			{/if}
		</Alert>
		{#if !accountCreated}
			<form class="mt-4 flex flex-col">
				<InputControl
					label="Username"
					name="username"
					value="{username}"
					on:input="{event => (username = event.target.value)}"
					required
					validations="{[
						{ type: 'required', message: 'Username is mandatory' },
						{ type: 'maxlength', maxlength: 50, message: 'Username cannot be longer than 50 characters' },
						{ type: 'pattern', pattern: /^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$/, message: 'Username can only contain letters and digits' }
						]}"
					on:validate="{event => (validUsername = event.detail.valid)}"
				/>
				<InputControl
					type="email"
					label="Email"
					name="email"
					value="{email}"
					on:input="{event => (email = event.target.value)}"
					required
					validations="{[
						{ type: 'required', message: 'Email is mandatory' },
						{ type: 'minlength', minlength: 5, message: 'Email is required to be at least 5 characters' },
						{ type: 'maxlength', maxlength: 254, message: 'Email cannot be longer than 254 characters' },
						{ type: 'pattern',
						pattern: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/, message: 'Email address is not valid' }
						]}"
					on:validate="{event => (validEmail = event.detail.valid)}"
				/>

				<InputControl
					type="password"
					label="Password"
					name="password"
					value="{password}"
					on:input="{event => (password = event.target.value)}"
					required
					validations="{[
						{ type: 'required', message: 'Password is mandatory' },
						{ type: 'minlength', minlength: 4, message: 'Password is required to be at least 4 characters' },
						{ type: 'maxlength', maxlength: 50, message: 'Password cannot be longer than 50 characters' }
						]}"
					on:validate="{event => (validPassword = event.detail.valid)}"
				/>
				<InputControl
					type="password"
					label="Confirm Password"
					name="confirmPassword"
					value="{confirmPassword}"
					on:input="{event => (confirmPassword = event.target.value)}"
					required
					validations="{[
						{ type: 'required', message: 'Password is mandatory' },
						{ type: 'minlength', minlength: 4, message: 'Password is required to be at least 4 characters' },
						{ type: 'maxlength', maxlength: 50, message: 'Password cannot be longer than 50 characters' }
						]}"
					on:validate="{event => (validConfirmPassword = event.detail.valid)}"
					let:message={message}
					let:dirty={dirty}
					let:valid={valid}
				>
				<div class="flex items-center">
					{#if confirmPasswordMismatch}
						<Icon class="fa-icon mr-2" icon="{faExclamationCircle}" />
						Password and its confirmation do not match
					{:else if dirty && !valid}
						<Icon class="fa-icon mr-2" icon="{faExclamationCircle}" />
						{message}
					{:else}
						&nbsp;
					{/if}
				</div>
			</InputControl>

				<button
					type="submit"
					on:click|preventDefault="{createUserAccount}"
					class="my-4 w-48 m-auto btn btn-primary"
					disabled="{!validForm}"
				>Create account</button>
			</form>
		{/if}
	</div>
</section>
